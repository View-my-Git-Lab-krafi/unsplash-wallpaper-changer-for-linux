#!/bin/bash

echo "This is version 1.6 of the script"
echo "Its 1.6 , but dont this its beta, its rock solid stable"

    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "===========================+    "keep folling www.krafi.info "      +============================="
    echo "===========================+     echo "www.gitlab.com/krafi"        +============================="
    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "=================================================================================================="


# Set the monitor resolution 
monitor_resolution="1680x1050"

# 60 sec wallpaper will change 
change_timer="60s"

# Set the maximum size of the directory in GB
max_size_gb=9

# List of search queries to use
queries=(
    "quran"
    "russia"
    "moscow"
    "cactus"
    "horror"
    "nature"
    "quotes"
    "technology"
    "travel"
    "universe"
    "3D"
    "islamic"
    "mathematics"
    "mosques"
    "Kaaba"
    "Linux"
    "Kremlin"
    "korea"
    "southkorea"
    "kazan"
    "Faberge"
    "Madinah"
    "Sochi"
    "Alhambra"
    "Novgorod"
    "StPetersburg"
    "Seoul"
    "Jeju"
    "Busan"
    "Gyeongju"
    "Incheon"
    "Daegu"
    "Jeonju"
    "Andong"
    "Sokcho"
)

killall variety wallch wallpaperd xfdesktop bgs pywal hsetroot chameleon wallpaper backdrop xfdesktop wally wallpapoz drapes wallmaster feh wallswap wallchop wallpaper-tray wallpapernator wallpapergui wallutils wallsetter wallpaperviewer wallpaper.sh wallpaperd-py wallpaperd-randr wallpaperclock wpset wallpaper-setter wallpapergnome wallpapoz-cmd swaybg fluxbox-setbg qiv xloadimage gtk-redshift xsetbg fbsetbg hsetroot-gtk setroot wpcd wallpapergtk esetroot wmsetbg jsetroot xli xwallpaper xwinwrap display xv feh-cam xplanet xsetroot xpmroot 2>/dev/null
killall gsetroot e16keyedit haba wmphoto wmwallpaper wmxpmroot wmpuzzle wmwebcam wmthemes xwp camE camE-config xsetbg-root xvtsetbg xli-root gqview xsetbg-xfce wmwave viper-bg ctwm-root wmsetbg-slitaz eminus xsri wmgrabimage wmsetbg-pixmap icewmbg rasdaemon wmtv cmusbg mgp tulip dr14tm fbi background stsetbg xsetroot-tk tkdesk wmforkplop epiwm displayq wmgua xwallpaper-manage qiv-slideshow svkbd wmblob gsetroot-gtk2 wmifs wmsystemtray xvattr icontool wmbackground wmxmms2 wnckpager-background wmpinboard wmbiff qiv-command wmapm wmconvert camstream xautomat 2>/dev/null



echo "3"; sleep 1s; echo "2"; sleep 1s; echo "1"; sleep 1s; echo "Run!"; sleep 2s

homeuser="$(whoami)"
homeuser_group="$(groups)"

nitrogen --restore 2>/dev/null
echo "file://$/home/'$homeuser'/Pictures/Wallpapers@krafi.info/" > ~/.config/nitrogen/bg-saved.cfg 2>/dev/null

# Create a directory for storing pictures in the home directory
mkdir -p /home/"$homeuser"/Pictures

# Create a directory for storing local binaries in the home directory
mkdir -p /home/"$homeuser"/.local/bin/


# Get the full path and filename of the currently running script
fullpath="$(realpath "$0")"

# Get the filename with extension
filename="$(basename "$fullpath")"

echo "The name of the currently running script is: $filename"

 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "================+                                                               +================="
 #   echo "================+    This section is for installing this file on yor system     +================="
 #   echo "================+                it make a copy of this file to                 +================="
 #   echo "================+            /home/"$homeuser"/.local/bin/$filname              +================="
 #   echo "================+                                                               +================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 
 
# Pause the script or command for 10 seconds before continuing

# Check if /home/"$homeuser"/.local/bin/ exists
if [ ! -f /home/"$homeuser"/.local/bin/"$filename" ]; then
    # Check if the script is already running from /home/"$homeuser"/.local/bin
    if [ "$(dirname "$fullpath")" != "$HOME/.local/bin" ]; then
        echo "Creating /home/"$homeuser"/.local/bin/$filename"
        # Create the directory if it doesn't exist
        mkdir -p /home/"$homeuser"/.local/bin
        # Copy this script to /home/"$homeuser"/.local/bin/xyz.sh
        cp "$fullpath" /home/"$homeuser"/.local/bin/"$filename"
        
        # Make the file executable if it isn't already
        if [[ $(stat -c '%a' /home/"$homeuser"/.local/bin/"$filename") != "755" ]]; then
            # Check if pkexec is available, and if so, use it to set the file mode
            if command -v pkexec >/dev/null 2>&1; then
                pkexec chmod +x /home/"$homeuser"/.local/bin/"$filename"
            else
                # Otherwise, try to set the file mode using sudo (if available)
                if command -v sudo >/dev/null 2>&1; then
                    sudo chmod +x /home/"$homeuser"/.local/bin/"$filename"
                else
                    echo "Could not set file mode for /home/"$homeuser"/.local/bin/$filename. Please set it manually."
                fi
            fi
        fi
    else
        echo "The script is already running from the /home/"$homeuser"/.local/bin directory. Skipping copy to prevent infinite loop."
    fi
else
    echo "File /home/"$homeuser"/.local/bin/$filename already exists. Skipping copy."
fi


  
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "======================+                                                    +======================"
 #   echo "======================+  This section is for downloading wget and nitrogen +======================"
 #   echo "======================+         Tested on Fedora , Ubuntu , Arch           +======================"
 #   echo "======================+        Tested on Gnome , KDE , i3 , unity          +======================"
 #   echo "======================+                                                    +======================"
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="

# Create the directory for the wallpapers wallpaper
mkdir -p /home/"$homeuser"/Pictures/Wallpapers@krafi.info

# Detect package manager and install required packages
if command -v apt-get &> /dev/null; then
    echo "Detected apt package manager"
    if ! command -v wget &> /dev/null; then
        pkexec apt-get update -y
        pkexec apt-get install wget -y
    else
        echo "wget is already installed"
    fi

    if ! command -v nitrogen &> /dev/null; then
        pkexec apt-get update -y
        pkexec apt-get install nitrogen -y
    else
        echo "nitrogen is already installed"
    fi

elif command -v yum &> /dev/null; then
    echo "Detected yum package manager"
    if ! command -v wget &> /dev/null; then
        pkexec yum install wget -y
    else
        echo "wget is already installed"
    fi

    if ! command -v nitrogen &> /dev/null; then
        pkexec yum install nitrogen -y
    else
        echo "nitrogen is already installed"
    fi

elif command -v pacman &> /dev/null; then
    echo "Detected pacman package manager"
    if ! command -v wget &> /dev/null; then
        pkexec pacman -Syu wget -y
    else
        echo "wget is already installed"
    fi

    if ! command -v nitrogen &> /dev/null; then
        pkexec pacman -Syu nitrogen -y
    else
        echo "nitrogen is already installed"
    fi

elif command -v dnf &> /dev/null; then
    echo "Detected dnf package manager"
    if ! command -v wget &> /dev/null; then
        pkexec dnf install wget -y
    else
        echo "wget is already installed"
    fi

    if ! command -v nitrogen &> /dev/null; then
        pkexec dnf install nitrogen -y
    else
        echo "nitrogen is already installed"
    fi

else
    echo "Unable to detect package manager"
    echo "This error is coming from line 225"
    echo "Still wana fix this code"
    echo "install nitrogen and wget manually "
    echo "remove 'exit 1' this one from line 225"
    
    exit 1
fi

 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "================+                                                               +================="
 #   echo "================+             adding to to systemd  for autostart               +================="
 #   echo "================+      I disable this one, because it dont work on all disto    +================="
 #   echo "================+                                                               +================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
: '  This is a block comment.
homeuser="$(whoami)"
homeuser_group="$(groups)"

# Check if the hello.service file already exists
if [ ! -f /etc/systemd/system/$filename.service ]; then
    # Create a systemd service to run the script at startup
    pkexec sh -c "cat <<EOF > /etc/systemd/system/$filename.service
[Unit]
Description= Unsplash Wallpaper generator by Krafi.info

[Service]
User=$homeuser
Group=$homeuser_grop
ExecStart=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Environment=DISPLAY=:0
LimitCPU=infinity
LimitMEMLOCK=infinity
Type=simple
Restart=always
RestartSec=40


[Install]
WantedBy=multi-user.target graphical.target
EOF"
     # Reload systemd to make it aware of the new service
    pkexec systemctl daemon-reload

    # Enable the service to start automatically at boot time
    pkexec systemctl enable $filename.service
fi

# Check if the hello.service is currently running
if ! pkexec systemctl is-active --quiet $filename.service; then
    # Start the service immediately
    echo "systemctl start"
    pkexec systemctl start $filename.service
fi




This is a block comment.
  ' 

homeuser="$(whoami)"
homeuser_group="$(groups)"
desktop_env="unknown"


mkdir -p /home/"$homeuser"/.config/autostart/
# Check for GNOME desktop environment
if [ -n "$(command -v gnome-shell)" ]; then
  desktop_env="g"
  		
cat <<EOF > /home/"$homeuser"/.config/autostart/$filename.desktop
  
[Desktop Entry]
Type=Application
Exec=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=unsplash_krafi_wallpaper_generator
Comment=My program that starts automatically unsplash random wallpaper
EOF


# Check if the desktop file exists in the autostart folder
if [ -e /home/"$homeuser"/.config/autostart/"$filename.desktop" ]
then
  # Check if the executable permission is already set for the file
  if [ -x /home/"$homeuser"/.config/autostart/"$filename.desktop" ]
  then
    echo "Executable permission already set for $filename.desktop"
  else
    # Set the executable permission using pkexec
    pkexec chmod +x /home/"$homeuser"/.config/autostart/"$filename.desktop"
    echo "Executable permission set for $filename.desktop"
  fi
else
  echo "$filename.desktop not found in autostart folder"
fi



fi


# Check for KDE desktop environment
if [ -n "$(command -v startkde)" ]; then
  desktop_env="k"
# /home/"$homeuser"/.config/autostart/
cat <<EOF > /home/"$homeuser"/.kde4/Autostart/$filename.desktop

[Desktop Entry]
Type=Application
Exec=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Hidden=false
NoDisplay=false
X-KDE-autostart-enabled=true
Name=unsplash_krafi_wallpaper_generator
Comment=My program that starts automatically unsplash random wallpaper
EOF

# Check if the desktop file exists in the KDE 4 autostart folder
if [ -e /home/"$homeuser"/.kde4/Autostart/"$filename.desktop" ]
then
  # Check if the executable permission is already set for the file
  if [ -x /home/"$homeuser"/.kde4/Autostart/"$filename.desktop" ]
  then
    echo "Executable permission already set for $filename.desktop"
  else
    # Set the executable permission using pkexec
    pkexec chmod +x /home/"$homeuser"/.kde4/Autostart/"$filename.desktop"
    echo "Executable permission set for $filename.desktop"
  fi
else
  echo "$filename.desktop not found in KDE 4 autostart folder"
fi

fi

# Check for XFCE desktop environment
if [ -n "$(command -v xfce4-session)" ]; then
  desktop_env="x"
  
cat <<EOF > /home/"$homeuser"/.config/autostart/$filename.desktop
[Desktop Entry]
Type=Application
Exec=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Hidden=false
NoDisplay=false
X-XFCE-Autostart-enabled=true
Name=unsplash_krafi_wallpaper_generator
Comment=My program that starts automatically unsplash random wallpaper
EOF

# Set the filename variable to the name of the desktop file


# Check if the desktop file exists in the autostart folder
if [ -e /home/"$homeuser"/.config/autostart/"$filename.desktop" ]
then
  # Check if the executable permission is already set for the file
  if [ -x /home/"$homeuser"/.config/autostart/"$filename.desktop" ]
  then
    echo "Executable permission already set for $filename.desktop"
  else
    # Set the executable permission using pkexec
    pkexec chmod +x /home/"$homeuser"/.config/autostart/"$filename.desktop"
    echo "Executable permission set for $filename.desktop"
  fi
else
  echo "$filename.desktop not found in autostart folder"
fi

fi

# Check for Cinnamon desktop environment
if [ -n "$(command -v cinnamon-session)" ]; then
  desktop_env="c"
  
cat <<EOF > /home/"$homeuser"/.config/autostart/$filename.desktop
[Desktop Entry]
Type=Application
Exec=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=unsplash_krafi_wallpaper_generator
Comment=My program that starts automatically unsplash random wallpaper
EOF
pkexec chmod +x /home/"$homeuser"/.config/autostart/$filename.desktop

fi

# If none of the supported desktop environments are detected, print "n"
if [ "$desktop_env" = "unknown" ]; then
desktop_env="n"

cat <<EOF > /home/"$homeuser"/.config/autostart/$filename.desktop
[Desktop Entry]
Type=Application
Exec=/home/$homeuser/.local/bin/unsplash_krafi_wallpaper_generator
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=unsplash_krafi_wallpaper_generator
Comment=My program that starts automatically unsplash random wallpaper
EOF


# Set the filename variable to the name of the desktop file

# Check if the desktop file exists in the autostart folder
if [ -e /home/"$homeuser"/.config/autostart/$filename.desktop ]
then
  # Check if the executable permission is already set for the file
  if [ -x /home/"$homeuser"/.config/autostart/$filename.desktop ]
  then
    echo "Executable permission already set for $filename.desktop"
  else
    # Set the executable permission using pkexec
    pkexec chmod +x /home/"$homeuser"/.config/autostart/$filename.desktop
    echo "Executable permission set for $filename.desktop"
  fi
else
  echo "$filename.desktop not found in autostart folder"
fi


fi


# Check if i3 is installed on the system
if [ -x "$(command -v i3)" ]; then
  # Check if the exec command exists in the i3 configuration file
  if grep -q '^exec --no-startup-id ~/.local/bin/unsplash_krafi_wallpaper_generator' /home/"$homeuser"/.config/i3/config; then
    echo "The exec command already exists in the i3 configuration file."
  else
    # Add the exec command to the i3 configuration file
    echo "Adding the exec command to the i3 configuration file..."
    echo 'exec --no-startup-id ~/.local/bin/unsplash_krafi_wallpaper_generator' >> /home/"$homeuser"/.config/i3/config
  fi
else
  echo "i3 is not installed on your system."
fi



# Print the detected desktop environment letter
echo "$desktop_env"

 
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "================+                                                               +================="
 #   echo "================+                Take random string from that query             +================="
 #   echo "================+             download that image and set as wallpaper          +================="
 #   echo "================+                        keep repeat (loop)                     +================="
 #   echo "================+                                                               +================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="
 #   echo "=================================================================================================="

homeuser="$(whoami)"
while true; do
    # Select a random query from the array
    query=${queries[$RANDOM % ${#queries[@]}]}

    # Download a random image for the current query
    filenameimg="${query}_$(date +"%d-%m-%y-%s").jpg"
    wget -O /home/"$homeuser"/Pictures/Wallpapers@krafi.info/"$filenameimg" "https://source.unsplash.com/random/"$monitor_resolution"/?"$query"" && nitrogen --set-zoom-fill /home/"$homeuser"/Pictures/Wallpapers@krafi.info/"$filenameimg"
  

if pgrep "plasmashell" > /dev/null ; then
    # KDE Plasma is running, execute the dbus-send script to change the wallpaper
    dbus-send --session --dest=org.kde.plasmashell --type=method_call /PlasmaShell \
              org.kde.PlasmaShell.evaluateScript \
              'string:
              var Desktops = desktops();
              for (i=0;i<Desktops.length;i++) {
                  d = Desktops[i];
                  d.wallpaperPlugin = "org.kde.image";
                  d.currentConfigGroup = Array("Wallpaper", "org.kde.image", "General");
                  d.writeConfig("Image", "/home/'$homeuser'/Pictures/Wallpapers@krafi.info/'$filenameimg'");
              }'
else
    # KDE Plasma is not running
    echo "KDE Plasma not detected"
fi

# Set the path to the directory
dir_path="/home/'$homeuser'/Pictures/Wallpapers@krafi.info/"

# Get the list of all files in the directory
files=$(ls "$dir_path")

# Create an empty array to store file sizes
sizes=()

# Iterate through the files and store their sizes in the array
for file in $files; do
    file_path="$dir_path/$file"
    if [[ -f "$file_path" ]]; then
        size=$(du -b "$file_path" | cut -f1)
        if [[ " ${sizes[@]} " =~ " $size " ]]; then
            # If a file with the same size already exists, delete the current file
            rm "$file_path"
            echo "Deleted $file_path"
        else
            sizes+=("$size")
        fi
    fi
done



# Convert the maximum size to bytes
max_size_bytes=$((max_size_gb * 1024 * 1024 * 1024))

# Calculate the current size of the directory in bytes
current_size_bytes=$(du -sb "$dir_path" | cut -f1)

# Delete files until the directory size is less than or equal to the maximum size
while [[ $current_size_bytes -gt $max_size_bytes ]]; do
    # Get the oldest file in the directory
    oldest_file=$(ls -t "$dir_path" | tail -1)

    # Delete the oldest file
    file_path="$dir_path/$oldest_file"
    rm "$file_path"
    echo "Deleted $file_path"

    # Update the current size of the directory
    current_size_bytes=$(du -sb "$dir_path" | cut -f1)
done

# Set the number of days for old photos
old_days=30

# Find and delete files older than specified number of days
find "$dir_path" -type f -iname '*.jpg' -ctime +"$old_days" -exec rm {} \;

  
    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "==================================>     Category     <============================================"
    echo "==================================>      $query      <============================================"
    echo "==================================+  www.krafi.info  +============================================"
    echo "=================================================================================================="
    echo "=================================================================================================="
    echo "=================================================================================================="
    
    # Wait for 60 seconds before proceeding to the next query
    sleep "$change_timer"
done
echo "exit"

